name: Deploy Yachtparty to Google Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION || 'us-central1' }}
  REGISTRY: gcr.io

jobs:
  # Job 1: Run Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint
        continue-on-error: true

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test

  # Job 2: Build and Push Docker Images
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 30

    strategy:
      matrix:
        service:
          - name: twilio-webhook
            context: .
            dockerfile: packages/services/twilio-webhook/Dockerfile
          - name: sms-sender
            context: packages/services/sms-sender
            dockerfile: packages/services/sms-sender/Dockerfile
          - name: realtime-processor
            context: packages/services/realtime-processor
            dockerfile: packages/services/realtime-processor/Dockerfile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service.name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service.name }}-
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ matrix.service.name }}:latest
            ${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ matrix.service.name }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          platforms: linux/amd64

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # Job 3: Run Database Migrations
  migrate:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd packages/database && npm ci

      - name: Run migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Job 4: Deploy to Cloud Run
  deploy:
    name: Deploy Services
    runs-on: ubuntu-latest
    needs: [build, migrate]
    timeout-minutes: 20

    strategy:
      matrix:
        service:
          - name: twilio-webhook
            min_instances: 1
            max_instances: 10
            memory: 512Mi
            cpu: 1
            concurrency: 80
            timeout: 60
          - name: sms-sender
            min_instances: 1
            max_instances: 5
            memory: 512Mi
            cpu: 1
            concurrency: 1000
            timeout: 3600  # 1 hour for long-running WebSocket connections
          - name: realtime-processor
            min_instances: 1
            max_instances: 5
            memory: 512Mi
            cpu: 1
            concurrency: 1000
            timeout: 3600  # 1 hour for long-running WebSocket connections

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ matrix.service.name }} \
            --image=${{ env.REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ matrix.service.name }}:${{ github.sha }} \
            --region=${{ env.GCP_REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --min-instances=${{ matrix.service.min_instances }} \
            --max-instances=${{ matrix.service.max_instances }} \
            --memory=${{ matrix.service.memory }} \
            --cpu=${{ matrix.service.cpu }} \
            --concurrency=${{ matrix.service.concurrency }} \
            --timeout=${{ matrix.service.timeout }} \
            --set-env-vars="NODE_ENV=production" \
            --set-env-vars="PORT=8080" \
            --set-secrets="SUPABASE_URL=SUPABASE_URL:latest" \
            --set-secrets="SUPABASE_SERVICE_KEY=SUPABASE_SERVICE_KEY:latest" \
            --set-secrets="TWILIO_ACCOUNT_SID=TWILIO_ACCOUNT_SID:latest" \
            --set-secrets="TWILIO_AUTH_TOKEN=TWILIO_AUTH_TOKEN:latest" \
            --set-secrets="TWILIO_PHONE_NUMBER=TWILIO_PHONE_NUMBER:latest" \
            --set-secrets="ANTHROPIC_API_KEY=ANTHROPIC_API_KEY:latest" \
            --set-secrets="DATABASE_URL=DATABASE_URL:latest" \
            --no-traffic

      - name: Get service URL
        id: service-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ matrix.service.name }} \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Service URL: $SERVICE_URL"

      - name: Health check
        run: |
          echo "Waiting for service to be ready..."
          sleep 10

          # Try to hit health endpoint
          HEALTH_URL="${{ steps.service-url.outputs.url }}/health"
          echo "Checking health at: $HEALTH_URL"

          for i in {1..5}; do
            if curl -f -s "$HEALTH_URL" > /dev/null 2>&1; then
              echo "Health check passed!"
              exit 0
            fi
            echo "Attempt $i failed, retrying..."
            sleep 10
          done

          echo "Warning: Health check did not pass within timeout"
          exit 0  # Don't fail deployment on health check failure

      - name: Route traffic to new revision
        run: |
          gcloud run services update-traffic ${{ matrix.service.name }} \
            --region=${{ env.GCP_REGION }} \
            --to-latest

  # Job 5: Verify Deployment
  verify:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    timeout-minutes: 10

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: List deployed services
        run: |
          echo "=== Deployed Services ==="
          gcloud run services list --region=${{ env.GCP_REGION }} --platform=managed

      - name: Get service details
        run: |
          for service in twilio-webhook sms-sender realtime-processor; do
            echo ""
            echo "=== Service: $service ==="
            gcloud run services describe $service \
              --region=${{ env.GCP_REGION }} \
              --format="table(status.url,status.latestCreatedRevisionName,status.traffic)"
          done

      - name: Deployment summary
        run: |
          echo ""
          echo "=== Deployment Complete ==="
          echo "Git SHA: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Region: ${{ env.GCP_REGION }}"
          echo ""
          echo "All services deployed successfully!"

# Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, build, migrate, deploy]
    if: failure()

    steps:
      - name: Deployment failed
        run: |
          echo "=== Deployment Failed ==="
          echo "Git SHA: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Check the logs above for details"
          exit 1
