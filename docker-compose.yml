# Yachtparty Multi-Agent SMS Platform - Local Development Environment
# Docker Compose configuration for running all services locally

version: '3.9'

services:
  # PostgreSQL Database with pg_cron extension
  postgres:
    image: postgres:15-alpine
    container_name: yachtparty-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: yachtparty_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      # Persist database data
      - postgres_data:/var/lib/postgresql/data
      # Initialize pg_cron extension
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - yachtparty
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Twilio Webhook Handler Service
  twilio-webhook:
    build:
      context: .
      dockerfile: packages/services/twilio-webhook/Dockerfile
      target: builder  # Use builder stage for development with hot-reload
    container_name: yachtparty-twilio-webhook
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      NODE_ENV: development
      PORT: 8080
      # Database
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/yachtparty_dev
      # Supabase (use hosted for local dev)
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      # Twilio
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
      # Anthropic
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    volumes:
      # Mount source code for hot-reload
      - ./packages/services/twilio-webhook/src:/app/packages/services/twilio-webhook/src:ro
      - ./packages/shared/src:/app/packages/shared/src:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - yachtparty
    command: ["npm", "run", "dev"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # SMS Sender Service (WebSocket-based)
  sms-sender:
    build:
      context: packages/services/sms-sender
      dockerfile: Dockerfile
      target: builder  # Use builder stage for development
    container_name: yachtparty-sms-sender
    restart: unless-stopped
    ports:
      - "8082:8080"
    environment:
      NODE_ENV: development
      PORT: 8080
      # Database
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/yachtparty_dev
      # Supabase
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      # Twilio
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      TWILIO_PHONE_NUMBER: ${TWILIO_PHONE_NUMBER}
    volumes:
      # Mount source code for hot-reload
      - ./packages/services/sms-sender/src:/app/src:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - yachtparty
    command: ["npm", "run", "dev"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Realtime Processor Service (WebSocket-based)
  realtime-processor:
    build:
      context: packages/services/realtime-processor
      dockerfile: Dockerfile
      target: builder  # Use builder stage for development
    container_name: yachtparty-realtime-processor
    restart: unless-stopped
    ports:
      - "8083:8080"
    environment:
      NODE_ENV: development
      PORT: 8080
      # Database
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/yachtparty_dev
      # Supabase
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      # Anthropic
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      # Perplexity (optional)
      PERPLEXITY_API_KEY: ${PERPLEXITY_API_KEY:-}
    volumes:
      # Mount source code for hot-reload
      - ./packages/services/realtime-processor/src:/app/src:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - yachtparty
    command: ["npm", "run", "dev"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # pgAdmin (Optional) - Web-based PostgreSQL administration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: yachtparty-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@yachtparty.local
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - yachtparty
    profiles:
      - tools  # Only start with: docker-compose --profile tools up

volumes:
  postgres_data:
    name: yachtparty_postgres_data
  pgadmin_data:
    name: yachtparty_pgadmin_data

networks:
  yachtparty:
    name: yachtparty_network
    driver: bridge
